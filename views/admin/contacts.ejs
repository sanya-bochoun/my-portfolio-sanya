<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Contacts Management - Portfolio Admin</title>
    
    <!-- Favicon -->
    <link rel="icon" type="image/png" href="/assets/img/favicon-s.png">
    <link rel="shortcut icon" type="image/png" href="/assets/img/favicon-s.png">
    <link rel="apple-touch-icon" href="/assets/img/apple-touch-icon.png">
    
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Bootstrap Icons -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css" rel="stylesheet">
    
    <style>
        :root {
            --admin-primary: #149ddd;
            --admin-secondary: #050d18;
            --admin-light: #f8f9fa;
            --admin-dark: #272829;
            --admin-accent: #0d7aa7;
        }
        
        body {
            background-color: var(--admin-light);
            color: var(--admin-dark);
            font-family: "Roboto", system-ui, -apple-system, "Segoe UI", Roboto, sans-serif;
        }
        
        .navbar {
            background: linear-gradient(135deg, var(--admin-primary) 0%, var(--admin-accent) 100%) !important;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            padding: 0.5rem 1rem !important;
            min-height: 56px !important;
            max-height: 56px !important;
            height: 56px !important;
        }
        
        .navbar-brand {
            color: #ffffff !important;
            font-weight: 600;
            font-size: 1.25rem !important;
            padding: 0.25rem 0 !important;
            line-height: 1.2 !important;
            margin: 0 !important;
        }
        
        .navbar .nav-link {
            color: #ffffff !important;
            padding: 0.25rem 0.75rem !important;
            font-weight: 500;
            line-height: 1.5 !important;
        }
        
        .navbar .btn {
            border-color: rgba(255, 255, 255, 0.3);
            color: #ffffff !important;
            padding: 0.25rem 0.75rem !important;
            font-size: 0.875rem !important;
            line-height: 1.5 !important;
            margin: 0 !important;
        }
        
        .navbar .btn:hover {
            background-color: rgba(255, 255, 255, 0.1) !important;
            border-color: rgba(255, 255, 255, 0.5);
        }
        
        .navbar .btn-link {
            border: none !important;
            background: none !important;
            text-decoration: none !important;
        }
        
        .navbar-toggler {
            padding: 0.25rem 0.5rem !important;
            font-size: 1rem !important;
            border: 1px solid rgba(255, 255, 255, 0.3) !important;
        }
        
        .navbar .container-fluid {
            padding: 0 1rem !important;
        }
        
        .sidebar {
            min-height: 100vh;
            background: linear-gradient(135deg, var(--admin-secondary) 0%, #1a252f 100%);
            box-shadow: 2px 0 10px rgba(0, 0, 0, 0.1);
        }
        
        .sidebar .nav-link {
            color: #a8a9b4;
            padding: 12px 20px;
            margin: 4px 8px;
            border-radius: 8px;
            transition: all 0.3s ease;
            font-weight: 500;
        }
        
        .sidebar .nav-link.active {
            color: #ffffff;
            background: linear-gradient(45deg, var(--admin-primary), var(--admin-accent));
            box-shadow: 0 2px 8px rgba(20, 157, 221, 0.3);
        }
        
        .sidebar .nav-link:hover {
            color: #ffffff;
            background-color: rgba(20, 157, 221, 0.1);
            transform: translateX(4px);
        }
        
        .sidebar .nav-link i {
            margin-right: 10px;
            width: 20px;
            text-align: center;
        }
        
        .card {
            border: none;
            border-radius: 15px;
            box-shadow: 0 5px 20px rgba(0, 0, 0, 0.08);
            transition: all 0.3s ease;
        }
        
        .card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.15);
        }
        
        .card-header {
            background: linear-gradient(135deg, var(--admin-primary), var(--admin-accent));
            color: white;
            border-radius: 15px 15px 0 0 !important;
            font-weight: 600;
        }
        
        .btn-primary {
            background: linear-gradient(45deg, var(--admin-primary), var(--admin-accent));
            border: none;
            border-radius: 8px;
            font-weight: 500;
            padding: 10px 20px;
            transition: all 0.3s ease;
        }
        
        .btn-primary:hover {
            background: linear-gradient(45deg, var(--admin-accent), var(--admin-primary));
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(20, 157, 221, 0.4);
        }
        .contact-item {
            cursor: pointer;
            transition: all 0.3s ease;
        }
        .contact-item:hover {
            background-color: #f8f9fa;
        }
        .contact-item.unread {
            border-left: 4px solid #dc3545;
            background-color: #fff5f5;
        }
        .contact-item.read {
            border-left: 4px solid #ffc107;
        }
        .contact-item.replied {
            border-left: 4px solid #198754;
        }
        
        .main-content {
            background-color: var(--admin-light);
            min-height: calc(100vh - 56px);
            padding-top: 1rem;
        }
        
        .container-fluid {
            height: calc(100vh - 56px);
            padding: 0 !important;
        }
        
        .navbar .container-fluid {
            padding: 0 1rem !important;
        }
        
        html, body {
            height: 100%;
        }
        .status-badge {
            font-size: 0.75rem;
        }
        .message-detail {
            max-height: 600px;
            overflow-y: auto;
        }
    </style>
</head>
<body>
    <!-- Top Navigation -->
    <nav class="navbar navbar-expand-lg navbar-dark">
        <div class="container-fluid">
            <a class="navbar-brand" href="/admin">
                <i class="bi bi-speedometer2"></i> Portfolio Admin
            </a>
            
            <div class="navbar-nav ms-auto">
                <a class="nav-link" href="/" target="_blank">
                    <i class="bi bi-eye"></i> View Site
                </a>
                <form action="/admin/logout" method="POST" class="d-inline">
                    <button class="nav-link btn btn-link text-light" type="submit">
                        <i class="bi bi-box-arrow-right"></i> Logout
                    </button>
                </form>
            </div>
        </div>
    </nav>

    <div class="container-fluid">
        <div class="row">
            <!-- Sidebar -->
            <nav class="col-md-3 col-lg-2 d-md-block sidebar collapse">
                <div class="position-sticky pt-3">
                    <ul class="nav flex-column">
                        <li class="nav-item">
                            <a class="nav-link" href="/admin">
                                <i class="bi bi-house"></i> Dashboard
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="/admin/projects">
                                <i class="bi bi-folder"></i> Projects
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link active" href="/admin/contacts">
                                <i class="bi bi-envelope"></i> Contacts
                            </a>
                        </li>
                        <li class="nav-item mt-2">
                            <a class="nav-link" href="/admin/projects/add">
                                <i class="bi bi-plus-circle"></i> Add Project
                            </a>
                        </li>
                    </ul>
                </div>
            </nav>

            <!-- Main content -->
            <main class="col-md-9 ms-sm-auto col-lg-10 px-md-4 main-content">
                <!-- Header -->
                <div class="d-flex justify-content-between align-items-center pt-3 pb-2 mb-3 border-bottom">
                    <div>
                        <h1 class="h2">Contact Messages</h1>
                        <p class="text-muted">Manage customer inquiries and communications</p>
                    </div>
                    <div>
                        <button class="btn btn-outline-danger me-2" id="bulkDeleteBtn" style="display: none;">
                            <i class="bi bi-trash"></i> Delete Selected
                        </button>
                        <button class="btn btn-outline-success" id="markAllRead">
                            <i class="bi bi-check-all"></i> Mark All Read
                        </button>
                    </div>
                </div>

                <div class="row">
                    <!-- Contact List -->
                    <div class="col-md-5">
                        <div class="card">
                            <div class="card-header d-flex justify-content-between align-items-center">
                                <div class="d-flex align-items-center">
                                    <div class="form-check me-3">
                                        <input class="form-check-input" type="checkbox" id="selectAll">
                                        <label class="form-check-label" for="selectAll">
                                            Select All
                                        </label>
                                    </div>
                                    <h5 class="card-title mb-0">Messages (<%= contacts.length %>)</h5>
                                </div>
                                <div class="dropdown">
                                    <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown">
                                        Filter
                                    </button>
                                    <ul class="dropdown-menu">
                                        <li><a class="dropdown-item filter-status" href="#" data-status="all">All Messages</a></li>
                                        <li><a class="dropdown-item filter-status" href="#" data-status="unread">Unread</a></li>
                                        <li><a class="dropdown-item filter-status" href="#" data-status="read">Read</a></li>
                                        <li><a class="dropdown-item filter-status" href="#" data-status="replied">Replied</a></li>
                                    </ul>
                                </div>
                            </div>
                            <div class="card-body p-0" style="max-height: 600px; overflow-y: auto;">
                                <% if (contacts.length === 0) { %>
                                    <div class="text-center py-5">
                                        <p class="text-muted">No messages yet</p>
                                    </div>
                                <% } else { %>
                                    <% contacts.forEach(function(contact, index) { %>
                                        <div class="contact-item <%= contact.status %> p-3 border-bottom" 
                                             data-contact-id="<%= contact._id %>" 
                                             data-status="<%= contact.status %>">
                                            <div class="d-flex justify-content-between align-items-start">
                                                <div class="form-check me-2 mt-1">
                                                    <input class="form-check-input contact-checkbox" type="checkbox" value="<%= contact._id %>">
                                                </div>
                                                <div class="flex-grow-1">
                                                    <h6 class="mb-1"><%= contact.name %></h6>
                                                    <p class="mb-1 text-muted small"><%= contact.email %></p>
                                                    <p class="mb-1"><strong><%= contact.subjects %></strong></p>
                                                    <p class="mb-2 text-muted small"><%= contact.message.substring(0, 80) %>...</p>
                                                    <small class="text-muted">
                                                        <%= new Date(contact.createdAt).toLocaleDateString() %> 
                                                        <%= new Date(contact.createdAt).toLocaleTimeString() %>
                                                    </small>
                                                </div>
                                                <div>
                                                    <span class="badge bg-<%= contact.status === 'unread' ? 'danger' : contact.status === 'read' ? 'warning' : 'success' %> status-badge">
                                                        <%= contact.status %>
                                                    </span>
                                                </div>
                                            </div>
                                        </div>
                                    <% }); %>
                                <% } %>
                            </div>
                        </div>
                    </div>

                    <!-- Message Detail -->
                    <div class="col-md-7">
                        <div class="card">
                            <div class="card-header">
                                <h5 class="card-title mb-0" id="messageTitle">Select a message to view details</h5>
                            </div>
                            <div class="card-body message-detail" id="messageDetail">
                                <div class="text-center py-5 text-muted">
                                    <i class="bi bi-envelope display-1"></i>
                                    <p class="mt-3">Click on a message from the left to view details</p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </main>
        </div>
    </div>

    <!-- Reply Modal -->
    <div class="modal fade" id="replyModal" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Reply to Message</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="replyForm">
                        <input type="hidden" id="replyContactId">
                        <div class="mb-3">
                            <label for="replyText" class="form-label">Your Reply</label>
                            <textarea class="form-control" id="replyText" rows="5" 
                                      placeholder="Type your reply here..." required></textarea>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" id="sendReply">
                        <i class="bi bi-send"></i> Send Reply
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Bootstrap JS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <!-- SweetAlert2 -->
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    
    <script>
        let selectedContactId = null;
        const replyModal = new bootstrap.Modal(document.getElementById('replyModal'));

        // Contact item click handler
        document.querySelectorAll('.contact-item').forEach(item => {
            item.addEventListener('click', function() {
                const contactId = this.dataset.contactId;
                selectContact(contactId);
                
                // Mark as read if unread
                if (this.dataset.status === 'unread') {
                    markAsRead(contactId);
                    this.classList.remove('unread');
                    this.classList.add('read');
                    this.dataset.status = 'read';
                    this.querySelector('.status-badge').textContent = 'read';
                    this.querySelector('.status-badge').className = 'badge bg-warning status-badge';
                }
            });
        });

        function selectContact(contactId) {
            selectedContactId = contactId;
            
            // Remove active class from all items
            document.querySelectorAll('.contact-item').forEach(item => {
                item.classList.remove('bg-primary', 'text-white');
            });
            
            // Add active class to selected item
            const selectedItem = document.querySelector(`[data-contact-id="${contactId}"]`);
            selectedItem.classList.add('bg-primary', 'text-white');
            
            // Load contact details
            loadContactDetails(contactId);
        }

        function loadContactDetails(contactId) {
            // Find contact from the contact items
            const contactItem = document.querySelector(`.contact-item[data-contact-id="${contactId}"]`);
            if (!contactItem) return;
            
            const contact = {
                _id: contactId,
                name: contactItem.querySelector('h6').textContent,
                email: contactItem.querySelector('.text-muted.small').textContent,
                subjects: contactItem.querySelector('strong').textContent,
                message: contactItem.querySelector('.mb-2.text-muted.small').textContent.replace('...', ''),
                status: contactItem.querySelector('.status-badge').textContent.toLowerCase(),
                createdAt: contactItem.querySelector('small.text-muted').textContent
            };

            const messageTitle = document.getElementById('messageTitle');
            const messageDetail = document.getElementById('messageDetail');
            
            messageTitle.textContent = `${contact.name} - ${contact.subjects}`;
            
            let replyHtml = '';
            if (contact.adminReply) {
                replyHtml = `
                    <div class="alert alert-success mt-3">
                        <h6><i class="bi bi-reply"></i> Your Reply (${new Date(contact.repliedAt).toLocaleDateString()})</h6>
                        <p class="mb-0">${contact.adminReply}</p>
                    </div>
                `;
            }
            
            messageDetail.innerHTML = `
                <div class="mb-3">
                    <div class="d-flex justify-content-between align-items-start mb-3">
                        <div>
                            <h5>${contact.name}</h5>
                            <p class="text-muted mb-1">${contact.email}</p>
                            <small class="text-muted">
                                Received: ${new Date(contact.createdAt).toLocaleDateString()} 
                                ${new Date(contact.createdAt).toLocaleTimeString()}
                            </small>
                        </div>
                        <span class="badge bg-${contact.status === 'unread' ? 'danger' : contact.status === 'read' ? 'warning' : 'success'}">
                            ${contact.status}
                        </span>
                    </div>
                    
                    <div class="mb-3">
                        <h6>Subject: ${contact.subjects}</h6>
                    </div>
                    
                    <div class="mb-3">
                        <h6>Message:</h6>
                        <div class="bg-light p-3 rounded">
                            ${contact.message.replace(/\n/g, '<br>')}
                        </div>
                    </div>
                    
                    ${replyHtml}
                    
                    <div class="mt-3">
                        <button class="btn btn-primary" onclick="openReplyModal('${contact._id}', '${contact.name}')">
                            <i class="bi bi-reply"></i> Reply
                        </button>
                        <button class="btn btn-outline-warning ms-2" onclick="markAsRead('${contact._id}')">
                            <i class="bi bi-check"></i> Mark as Read
                        </button>
                        <button class="btn btn-outline-danger ms-2" onclick="deleteContact('${contact._id}', '${contact.name}')">
                            <i class="bi bi-trash"></i> Delete
                        </button>
                    </div>
                </div>
            `;
        }

        function openReplyModal(contactId, contactName) {
            document.getElementById('replyContactId').value = contactId;
            document.querySelector('#replyModal .modal-title').textContent = `Reply to ${contactName}`;
            document.getElementById('replyText').value = '';
            replyModal.show();
        }

        function markAsRead(contactId) {
            fetch(`/admin/contacts/status/${contactId}`, {
                method: 'PATCH',
                headers: {
                    'Content-Type': 'application/json',
                },
                credentials: 'same-origin',
                body: JSON.stringify({ status: 'read' })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Update UI
                    const item = document.querySelector(`[data-contact-id="${contactId}"]`);
                    if (item) {
                        item.classList.remove('unread');
                        item.classList.add('read');
                        item.dataset.status = 'read';
                        const badge = item.querySelector('.status-badge');
                        badge.textContent = 'read';
                        badge.className = 'badge bg-warning status-badge';
                    }
                }
            });
        }

        // Send reply
        document.getElementById('sendReply').addEventListener('click', function() {
            const contactId = document.getElementById('replyContactId').value;
            const replyText = document.getElementById('replyText').value.trim();
            
            if (!replyText) {
                alert('Please enter a reply message');
                return;
            }
            
            fetch(`/admin/contacts/reply/${contactId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                credentials: 'same-origin',
                body: JSON.stringify({ reply: replyText })
            })
            .then(response => {
                if (response.status === 401) {
                    // Unauthorized - redirect to login
                    Swal.fire({
                        title: 'Session Expired',
                        text: 'Please login again to continue',
                        icon: 'warning',
                        confirmButtonText: 'Login'
                    }).then(() => {
                        window.location.href = '/admin/login';
                    });
                    return Promise.reject('Unauthorized');
                }
                return response.json();
            })
            .then(data => {
                if (data.success) {
                    replyModal.hide();
                    Swal.fire('Success!', 'Reply sent successfully', 'success');
                    
                    // Update status in UI
                    const item = document.querySelector(`[data-contact-id="${contactId}"]`);
                    if (item) {
                        item.classList.remove('unread', 'read');
                        item.classList.add('replied');
                        item.dataset.status = 'replied';
                        const badge = item.querySelector('.status-badge');
                        badge.textContent = 'replied';
                        badge.className = 'badge bg-success status-badge';
                    }
                    
                    // Refresh contact details
                    if (selectedContactId === contactId) {
                        setTimeout(() => location.reload(), 1000);
                    }
                } else {
                    Swal.fire('Error!', data.error || 'Failed to send reply', 'error');
                }
            })
            .catch(error => {
                Swal.fire('Error!', 'Network error occurred', 'error');
            });
        });

        // Filter functionality
        document.querySelectorAll('.filter-status').forEach(filter => {
            filter.addEventListener('click', function(e) {
                e.preventDefault();
                const status = this.dataset.status;
                filterContacts(status);
            });
        });

        function filterContacts(status) {
            document.querySelectorAll('.contact-item').forEach(item => {
                if (status === 'all' || item.dataset.status === status) {
                    item.style.display = 'block';
                } else {
                    item.style.display = 'none';
                }
            });
        }

        // Mark all as read
        document.getElementById('markAllRead').addEventListener('click', function() {
            const unreadItems = document.querySelectorAll('.contact-item.unread');
            
            if (unreadItems.length === 0) {
                alert('No unread messages');
                return;
            }
            
            Swal.fire({
                title: 'Mark all as read?',
                text: `This will mark ${unreadItems.length} messages as read`,
                icon: 'question',
                showCancelButton: true,
                confirmButtonText: 'Yes, mark all'
            }).then((result) => {
                if (result.isConfirmed) {
                    unreadItems.forEach(item => {
                        markAsRead(item.dataset.contactId);
                    });
                    setTimeout(() => location.reload(), 1000);
                }
            });
        });

        function showAlert(type, message) {
            Swal.fire({
                icon: type,
                title: type === 'success' ? 'Success!' : 'Error!',
                text: message,
                timer: 3000,
                showConfirmButton: false
            });
        }

        // Delete Contact Function
        function deleteContact(contactId, contactName) {
            Swal.fire({
                title: 'Delete Contact?',
                text: `Are you sure you want to delete the message from ${contactName}? This action cannot be undone.`,
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#3085d6',
                confirmButtonText: 'Yes, delete it!'
            }).then((result) => {
                if (result.isConfirmed) {
                    fetch(`/admin/contacts/delete/${contactId}`, {
                        method: 'DELETE',
                        credentials: 'same-origin'
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            Swal.fire('Deleted!', 'Contact message has been deleted.', 'success')
                            .then(() => location.reload());
                        } else {
                            Swal.fire('Error!', data.error || 'Failed to delete contact', 'error');
                        }
                    })
                    .catch(error => {
                        Swal.fire('Error!', 'Network error occurred', 'error');
                    });
                }
            });
        }

        // Checkbox functionality
        let selectedContacts = new Set();
        const selectAllCheckbox = document.getElementById('selectAll');
        const contactCheckboxes = document.querySelectorAll('.contact-checkbox');
        const bulkDeleteBtn = document.getElementById('bulkDeleteBtn');

        if (selectAllCheckbox) {
            selectAllCheckbox.addEventListener('change', function() {
                contactCheckboxes.forEach(checkbox => {
                    checkbox.checked = this.checked;
                    if (this.checked) {
                        selectedContacts.add(checkbox.value);
                    } else {
                        selectedContacts.delete(checkbox.value);
                    }
                });
                updateBulkDeleteButton();
            });
        }

        contactCheckboxes.forEach(checkbox => {
            checkbox.addEventListener('change', function() {
                if (this.checked) {
                    selectedContacts.add(this.value);
                } else {
                    selectedContacts.delete(this.value);
                }
                
                // Update select all checkbox state
                if (selectAllCheckbox) {
                    const allChecked = Array.from(contactCheckboxes).every(cb => cb.checked);
                    const someChecked = Array.from(contactCheckboxes).some(cb => cb.checked);
                    selectAllCheckbox.checked = allChecked;
                    selectAllCheckbox.indeterminate = someChecked && !allChecked;
                }
                
                updateBulkDeleteButton();
            });
        });

        function updateBulkDeleteButton() {
            if (bulkDeleteBtn) {
                bulkDeleteBtn.style.display = selectedContacts.size > 0 ? 'inline-block' : 'none';
            }
        }

        // Bulk Delete
        if (bulkDeleteBtn) {
            bulkDeleteBtn.addEventListener('click', function() {
                if (selectedContacts.size === 0) return;
                
                Swal.fire({
                    title: 'Delete Selected Contacts?',
                    text: `Are you sure you want to delete ${selectedContacts.size} selected contact message(s)? This action cannot be undone.`,
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#d33',
                    cancelButtonColor: '#3085d6',
                    confirmButtonText: 'Yes, delete them!'
                }).then((result) => {
                    if (result.isConfirmed) {
                        const contactIds = Array.from(selectedContacts);
                        
                        fetch('/admin/contacts/bulk-delete', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            credentials: 'same-origin',
                            body: JSON.stringify({ ids: contactIds })
                        })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                Swal.fire('Deleted!', `${data.deletedCount} contact message(s) have been deleted.`, 'success')
                                .then(() => location.reload());
                            } else {
                                Swal.fire('Error!', data.error || 'Failed to delete contacts', 'error');
                            }
                        })
                        .catch(error => {
                            Swal.fire('Error!', 'Network error occurred', 'error');
                        });
                    }
                });
            });
        }

        // Auto-select contact from URL parameter
        document.addEventListener('DOMContentLoaded', function() {
            const urlParams = new URLSearchParams(window.location.search);
            const selectContactId = urlParams.get('select');
            
            if (selectContactId) {
                // Find and click the contact item
                const contactItem = document.querySelector(`.contact-item[data-contact-id="${selectContactId}"]`);
                if (contactItem) {
                    // Scroll to the contact item
                    contactItem.scrollIntoView({ behavior: 'smooth', block: 'center' });
                    
                    // Add highlight effect
                    contactItem.style.backgroundColor = '#e3f2fd';
                    contactItem.style.border = '2px solid #2196f3';
                    
                    // Click to load details
                    setTimeout(() => {
                        contactItem.click();
                        
                        // Remove highlight after 3 seconds
                        setTimeout(() => {
                            contactItem.style.backgroundColor = '';
                            contactItem.style.border = '';
                        }, 3000);
                    }, 500);
                    
                    // Clean URL
                    window.history.replaceState({}, document.title, '/admin/contacts');
                }
            }
        });
    </script>
</body>
</html>
